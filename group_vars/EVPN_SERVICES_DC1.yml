---

tenants:
  # Definition of tenants. Additional level of abstraction to VRFs
  - name: TENANT_DC1
    # Number used to generate the VNI of each VLAN by adding the VLAN number in this tenant.
    mac_vrf_vni_base: 10000
    vrfs:
      # VRF definitions inside the tenant.
      - name: A_DC1
        # VRF VNI definition.
        vrf_vni: 100
        # Enable VTEP Network diagnostics
        # This will create a loopback with virtual source-nat enable to perform diagnostics from the switch.
        svis:
          # SVI definitions.
          - id: 100
            # SVI Description
            name: A_DC1_VLAN100
            enabled: true
            # IP anycast gateway to be used in the SVI in every leaf.
            ip_address_virtual: 10.100.0.1/24
        #Used for VRF leaking, importing routes from VRF C_DC1
        additional_route_targets:
          - type: import
            address_family: evpn
            route_target: "120:120"

      - name: B_DC1
        vrf_vni: 110
        svis:
          - id: 110
            name: B_DC1_VLAN110
            enabled: true
            ip_address_virtual: 10.110.0.1/24
        #Used for VRF leaking, importing routes from VRF C_DC1
        additional_route_targets:
          - type: import
            address_family: evpn
            route_target: "120:120"
        
#
      - name: C_DC1
        vrf_vni: 120
        svis:
          - id: 120
            name: C_DC1_VLAN120
            enabled: true
            ip_address_virtual: 10.120.0.1/24
        # Used for VRF leaking, importing routes from VRF A_DC1 and B_DC1
        # WOULD THIS IMPORT FROM DC1 AS WELL..?
        additional_route_targets:
          - type: import
            address_family: evpn
            route_target: "100:100"
          - type: import
            address_family: evpn
            route_target: "110:110"
        

