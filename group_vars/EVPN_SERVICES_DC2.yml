---

tenants:
  # Definition of tenants. Additional level of abstraction to VRFs
  - name: TENANT_DC2
    # Number used to generate the VNI of each VLAN by adding the VLAN number in this tenant.
    mac_vrf_vni_base: 20000
    vrfs:
      # VRF definitions inside the tenant.
      - name: A_DC2
        # VRF VNI definition. The same as in DC1 since this VRF is leaked.
        vrf_vni: 100
        svis:
          # SVI definitions.
          - id: 200
            # SVI Description
            name: A_DC2_VLAN200
            enabled: true
            # IP anycast gateway to be used in the SVI in every leaf.
            ip_address_virtual: 10.200.0.1/24
        #Used for VRF leaking, importing routes from VRF C_DC2
#        additional_route_targets:
#          - type: import
#            address_family: evpn
#            route_target: "22:22"

      - name: B_DC2
        vrf_vni: 110
        svis:
          - id: 210
            name: B_DC2_VLAN210
            enabled: true
            ip_address_virtual: 10.210.0.1/24
        #Used for VRF leaking, importing routes from VRF C_DC2
#        additional_route_targets:
#          - type: import
#            address_family: evpn
#            route_target: "22:22"

      - name: C_DC2
        # VRF VNI definition. Differrent to DC1, this VRF is not leaked between DCs.
        vrf_vni: 220
        svis:
          - id: 220
            name: C_DC2_VLAN220
            enabled: true
            ip_address_virtual: 10.220.0.1/24
        # Used for VRF leaking, importing routes from VRF A_DC2 and B_DC2
        # WOULD THIS IMPORT FROM DC1 AS WELL..?
#        additional_route_targets:
#          - type: import
#            address_family: evpn
#            route_target: "10:10"           
#          - type: import
#            address_family: evpn
#            route_target: "11:11"
